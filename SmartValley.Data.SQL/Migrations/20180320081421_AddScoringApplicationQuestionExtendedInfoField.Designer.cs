// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Converters;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using SmartValley.Data.SQL.Core;
using SmartValley.Domain;
using SmartValley.Domain.Core;
using SmartValley.Domain.Entities;

namespace SmartValley.Data.SQL.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20180320081421_AddScoringApplicationQuestionExtendedInfoField")]
    partial class AddScoringApplicationQuestionExtendedInfoField
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-preview1-28290")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SmartValley.Domain.Entities.Application", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BlockchainType")
                        .HasMaxLength(100);

                    b.Property<string>("FinancialModelLink")
                        .HasMaxLength(400);

                    b.Property<string>("HardCap")
                        .HasMaxLength(40);

                    b.Property<bool>("InvestmentsAreAttracted");

                    b.Property<string>("MvpLink")
                        .HasMaxLength(400);

                    b.Property<long>("ProjectId");

                    b.Property<string>("ProjectStatus")
                        .HasMaxLength(100);

                    b.Property<string>("SoftCap")
                        .HasMaxLength(40);

                    b.Property<string>("WhitePaperLink")
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.ApplicationTeamMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About")
                        .HasMaxLength(500);

                    b.Property<long>("ApplicationId");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PhotoName")
                        .HasMaxLength(50);

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationTeamMembers");
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.ApplicationTeamMemberSocialMedia", b =>
                {
                    b.Property<int>("SocialMediaId");

                    b.Property<long>("TeamMemberId");

                    b.Property<string>("Url")
                        .IsRequired();

                    b.HasKey("SocialMediaId", "TeamMemberId");

                    b.HasIndex("TeamMemberId");

                    b.HasIndex("SocialMediaId", "TeamMemberId");

                    b.ToTable("ApplicationTeamMemberSocialMedias");
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.Area", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.AreaScoring", b =>
                {
                    b.Property<long>("ScoringId");

                    b.Property<int>("AreaId");

                    b.Property<int>("ExpertsCount");

                    b.Property<bool>("IsCompleted");

                    b.HasKey("ScoringId", "AreaId");

                    b.HasIndex("AreaId");

                    b.HasIndex("ScoringId", "AreaId");

                    b.ToTable("AreaScorings");
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.EstimateComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment")
                        .IsRequired();

                    b.Property<long>("ExpertId");

                    b.Property<long>("QuestionId");

                    b.Property<long>("ScoringId");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ScoringId");

                    b.ToTable("EstimateComments");
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.Expert", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<bool>("IsAvailable");

                    b.HasKey("UserId");

                    b.ToTable("Experts");
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.ExpertApplication", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ApplicantId");

                    b.Property<DateTimeOffset>("ApplyDate");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("CvName")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1500);

                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(30);

                    b.Property<int>("DocumentType");

                    b.Property<string>("FacebookLink")
                        .HasMaxLength(400);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LinkedInLink")
                        .HasMaxLength(400);

                    b.Property<string>("PhotoName")
                        .HasMaxLength(50);

                    b.Property<string>("ScanName")
                        .HasMaxLength(50);

                    b.Property<int>("Sex");

                    b.Property<int>("Status");

                    b.Property<string>("Why")
                        .IsRequired()
                        .HasMaxLength(1500);

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.ToTable("ExpertApplications");
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.ExpertApplicationArea", b =>
                {
                    b.Property<long>("ExpertApplicationId");

                    b.Property<int>("AreaId");

                    b.Property<int>("Status");

                    b.HasKey("ExpertApplicationId", "AreaId");

                    b.HasIndex("AreaId");

                    b.ToTable("ExpertApplicationAreas");
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.ExpertArea", b =>
                {
                    b.Property<long>("ExpertId");

                    b.Property<int>("AreaId");

                    b.HasKey("ExpertId", "AreaId");

                    b.ToTable("ExpertAreas");
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Address>("AuthorAddress")
                        .HasConversion(new ValueConverter<Address, string>(v => default(string), v => default(Address)))
                        .HasMaxLength(42);

                    b.Property<int>("CategoryId");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(50);

                    b.Property<long>("CountryId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<Guid>("ExternalId");

                    b.Property<DateTimeOffset?>("IcoDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("StageId");

                    b.Property<string>("Website")
                        .HasMaxLength(200);

                    b.Property<string>("WhitePaperLink")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CountryId");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("Name");

                    b.HasIndex("StageId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.ProjectSocialMedia", b =>
                {
                    b.Property<int>("SocialMediaId");

                    b.Property<long>("ProjectId");

                    b.Property<string>("Url")
                        .IsRequired();

                    b.HasKey("SocialMediaId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SocialMediaId", "ProjectId");

                    b.ToTable("ProjectSocialMedias");
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.ProjectTeamMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About")
                        .HasMaxLength(500);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PhotoName")
                        .HasMaxLength(50);

                    b.Property<long>("ProjectId");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectTeamMembers");
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.ProjectTeamMemberSocialMedia", b =>
                {
                    b.Property<int>("SocialMediaId");

                    b.Property<long>("TeamMemberId");

                    b.Property<string>("Url")
                        .IsRequired();

                    b.HasKey("SocialMediaId", "TeamMemberId");

                    b.HasIndex("TeamMemberId");

                    b.HasIndex("SocialMediaId", "TeamMemberId");

                    b.ToTable("ProjectTeamMemberSocialMedias");
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AreaType");

                    b.Property<int>("MaxScore");

                    b.Property<int>("MinScore");

                    b.HasKey("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.Scoring", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Address>("ContractAddress")
                        .HasConversion(new ValueConverter<Address, string>(v => default(string), v => default(Address)))
                        .HasMaxLength(42);

                    b.Property<DateTimeOffset>("CreationDate");

                    b.Property<DateTimeOffset?>("EstimatesDueDate");

                    b.Property<DateTimeOffset>("OffersDueDate");

                    b.Property<long>("ProjectId");

                    b.Property<double?>("Score");

                    b.Property<DateTimeOffset?>("ScoringEndDate");

                    b.Property<DateTimeOffset?>("ScoringStartDate");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.HasIndex("ScoringEndDate");

                    b.ToTable("Scorings");
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.ScoringApplicationQuestion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ExtendedInfo");

                    b.Property<string>("GroupKey");

                    b.Property<string>("GroupOrder");

                    b.Property<string>("Key");

                    b.Property<string>("ParentId");

                    b.Property<string>("ParentTriggerValue");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("ScoringApplicationQuestions");
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.ScoringOffer", b =>
                {
                    b.Property<long>("ScoringId");

                    b.Property<int>("AreaId");

                    b.Property<long>("ExpertId");

                    b.Property<DateTimeOffset>("ExpirationTimestamp");

                    b.Property<int>("Status");

                    b.HasKey("ScoringId", "AreaId", "ExpertId");

                    b.HasIndex("AreaId");

                    b.HasIndex("ExpertId");

                    b.HasIndex("ScoringId", "AreaId", "ExpertId");

                    b.ToTable("ScoringOffers");
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.SocialMedia", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SocialMedias");
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.Stage", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About");

                    b.Property<Address>("Address")
                        .HasConversion(new ValueConverter<Address, string>(v => default(string), v => default(Address)))
                        .HasMaxLength(42);

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<bool>("IsEmailConfirmed");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Address")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.UserRole", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.Voting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("EndDate");

                    b.Property<DateTimeOffset>("StartDate");

                    b.Property<Address>("VotingAddress")
                        .HasConversion(new ValueConverter<Address, string>(v => default(string), v => default(Address)))
                        .HasMaxLength(42);

                    b.HasKey("Id");

                    b.ToTable("Votings");
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.VotingProject", b =>
                {
                    b.Property<long>("ProjectId");

                    b.Property<long>("VotingId");

                    b.HasKey("ProjectId", "VotingId");

                    b.HasIndex("VotingId");

                    b.HasIndex("ProjectId", "VotingId");

                    b.ToTable("VotingProjects");
                });

            modelBuilder.Entity("SmartValley.Domain.ScoringApplication", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("Filled");

                    b.Property<long>("ProjectId");

                    b.Property<DateTime>("Saved");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ScoringApplications");
                });

            modelBuilder.Entity("SmartValley.Domain.ScoringApplicationAnswers", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("QuestionId");

                    b.Property<long?>("ScoringApplicationId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ScoringApplicationId");

                    b.ToTable("ScoringApplicationAnswers");
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.Application", b =>
                {
                    b.HasOne("SmartValley.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.ApplicationTeamMember", b =>
                {
                    b.HasOne("SmartValley.Domain.Entities.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.ApplicationTeamMemberSocialMedia", b =>
                {
                    b.HasOne("SmartValley.Domain.Entities.SocialMedia", "SocialMedia")
                        .WithMany()
                        .HasForeignKey("SocialMediaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartValley.Domain.Entities.ProjectTeamMember", "TeamMember")
                        .WithMany()
                        .HasForeignKey("TeamMemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.AreaScoring", b =>
                {
                    b.HasOne("SmartValley.Domain.Entities.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartValley.Domain.Entities.Scoring", "Scoring")
                        .WithMany("AreaScorings")
                        .HasForeignKey("ScoringId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.EstimateComment", b =>
                {
                    b.HasOne("SmartValley.Domain.Entities.Expert", "Expert")
                        .WithMany()
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartValley.Domain.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartValley.Domain.Entities.Scoring", "Scoring")
                        .WithMany()
                        .HasForeignKey("ScoringId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.Expert", b =>
                {
                    b.HasOne("SmartValley.Domain.Entities.User", "User")
                        .WithOne("Expert")
                        .HasForeignKey("SmartValley.Domain.Entities.Expert", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.ExpertApplication", b =>
                {
                    b.HasOne("SmartValley.Domain.Entities.User", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.ExpertApplicationArea", b =>
                {
                    b.HasOne("SmartValley.Domain.Entities.Area")
                        .WithMany("ExpertApplicationAreas")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartValley.Domain.Entities.ExpertApplication", "ExpertApplication")
                        .WithMany()
                        .HasForeignKey("ExpertApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.ExpertArea", b =>
                {
                    b.HasOne("SmartValley.Domain.Entities.Expert", "Expert")
                        .WithMany("ExpertAreas")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.Project", b =>
                {
                    b.HasOne("SmartValley.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartValley.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartValley.Domain.Entities.Stage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.ProjectSocialMedia", b =>
                {
                    b.HasOne("SmartValley.Domain.Entities.Project", "Project")
                        .WithMany("ProjectSocialMedias")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartValley.Domain.Entities.SocialMedia", "SocialMedia")
                        .WithMany("ProjectSocialMedias")
                        .HasForeignKey("SocialMediaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.ProjectTeamMember", b =>
                {
                    b.HasOne("SmartValley.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.ProjectTeamMemberSocialMedia", b =>
                {
                    b.HasOne("SmartValley.Domain.Entities.SocialMedia", "SocialMedia")
                        .WithMany()
                        .HasForeignKey("SocialMediaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartValley.Domain.Entities.ProjectTeamMember", "TeamMember")
                        .WithMany()
                        .HasForeignKey("TeamMemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.Scoring", b =>
                {
                    b.HasOne("SmartValley.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.ScoringOffer", b =>
                {
                    b.HasOne("SmartValley.Domain.Entities.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartValley.Domain.Entities.Expert", "Expert")
                        .WithMany()
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartValley.Domain.Entities.Scoring", "Scoring")
                        .WithMany()
                        .HasForeignKey("ScoringId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("SmartValley.Domain.Entities.Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartValley.Domain.Entities.User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartValley.Domain.Entities.VotingProject", b =>
                {
                    b.HasOne("SmartValley.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartValley.Domain.Entities.Voting", "Voting")
                        .WithMany()
                        .HasForeignKey("VotingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartValley.Domain.ScoringApplication", b =>
                {
                    b.HasOne("SmartValley.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartValley.Domain.ScoringApplicationAnswers", b =>
                {
                    b.HasOne("SmartValley.Domain.Entities.ScoringApplicationQuestion", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartValley.Domain.ScoringApplication")
                        .WithMany("Answers")
                        .HasForeignKey("ScoringApplicationId");
                });
#pragma warning restore 612, 618
        }
    }
}
